name: Monthly Auto Release

on:
   workflow_call: {}

concurrency:
   group: auto-release
   cancel-in-progress: false

jobs:
   release:
      runs-on: ubuntu-latest
      outputs:
         new_version: ${{ steps.bump.outputs.new_version }}
         changelog: ${{ steps.changelog.outputs.changelog }}

      steps:
         - name: Checkout code
           uses: actions/checkout@v4
           with:
              fetch-depth: 0

         - name: Set up Node.js
           uses: actions/setup-node@v4
           with:
              node-version: '20'

         - name: Get latest tag
           id: get_tag
           run: |
              latest=$(git tag -l 'v[0-9]*.[0-9]*.[0-9]*' \
                       | sort -V | tail -n1)
              LATEST_TAG=${latest:-v0.0.0}
              echo "LATEST_TAG=$LATEST_TAG" >> $GITHUB_ENV
              echo "latest_tag=$LATEST_TAG" >> $GITHUB_OUTPUT

         - name: Bump patch version
           id: bump
           run: |
              git config user.name  "github-actions[bot]"
              git config user.email "github-actions[bot]@users.noreply.github.com"

              # bump package.json & lockfile without tagging
              npm version patch --no-git-tag-version

              # capture and expose the new version (with leading 'v')
              NEW_VERSION="v$(node -p "require('./package.json').version")"
              echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

         - name: Build changelog from merged PRs
           id: changelog
           uses: mikepenz/release-changelog-builder-action@v4
           with:
              configuration: .github/changelog-config.json
              fromTag: ${{ steps.get_tag.outputs.latest_tag }}
              toTag: HEAD
           env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

         - name: Update CHANGELOG.md if present
           env:
              NEW_VERSION: ${{ steps.bump.outputs.new_version }}
              CHANGELOG_BODY: ${{ steps.changelog.outputs.changelog }}
           run: |
              if [[ -f CHANGELOG.md ]]; then
                DATE=$(date +'%Y-%m-%d')
                ENTRY="## [${NEW_VERSION#v}] - $DATE"$'\n\n'"$CHANGELOG_BODY"$'\n'

                # insert right under "# Changelog"
                awk -v e="$ENTRY" '
                  /^# Changelog/ {
                    print
                    print ""
                    printf e
                    next
                  }
                  { print }
                ' CHANGELOG.md > tmp && mv tmp CHANGELOG.md

                git config user.name  "github-actions[bot]"
                git config user.email "github-actions[bot]@users.noreply.github.com"
                git add CHANGELOG.md
                git commit -m "docs: update changelog for $NEW_VERSION"
              else
                echo "No CHANGELOG.md—skipping."
              fi

         - name: Create release branch & open PR
           id: create_pr
           uses: peter-evans/create-pull-request@v5
           with:
              token: ${{ secrets.GITHUB_TOKEN }}
              commit-message: 'chore: release ${{ steps.bump.outputs.new_version }}'
              title: 'chore: release ${{ steps.bump.outputs.new_version }}'
              body: |
                 This PR contains the version bump and changelog for ${{ steps.bump.outputs.new_version }}.
              base: main
              branch: release-${{ steps.bump.outputs.new_version }}
              labels: automated, release

         - name: Wait for PR to merge
           run: |
              pr="${{ steps.create_pr.outputs.pull-request-number }}"
              echo "Merging PR #$pr…"
              gh pr merge "$pr" --auto --squash

              # Wait for merge to complete (with timeout)
              timeout=60
              elapsed=0
              while [ $elapsed -lt $timeout ]; do
                if gh pr view "$pr" --json state --jq '.state' | grep -q "MERGED"; then
                  echo "PR merged successfully"
                  break
                fi
                echo "Waiting for PR to merge..."
                sleep 10
                elapsed=$((elapsed + 10))
              done

              if [ $elapsed -ge $timeout ]; then
                echo "Timeout waiting for PR to merge"
                exit 1
              fi
           env:
              GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

         - name: Checkout merged main
           uses: actions/checkout@v4
           with:
              ref: main
              fetch-depth: 0

         - name: Create and push tag
           run: |
              git tag ${{ steps.bump.outputs.new_version }}
              git push origin ${{ steps.bump.outputs.new_version }}

         - name: Publish GitHub Release
           uses: ncipollo/release-action@v1
           with:
              tag: ${{ steps.bump.outputs.new_version }}
              name: ${{ steps.bump.outputs.new_version }}
              body: ${{ steps.changelog.outputs.changelog }}
           env:
              GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
